/*
 * This file is generated by jOOQ.
 */
package com.github.rinotc.springrestsample.infra.generated.jooq.tables;


import com.github.rinotc.springrestsample.infra.generated.jooq.Indexes;
import com.github.rinotc.springrestsample.infra.generated.jooq.Keys;
import com.github.rinotc.springrestsample.infra.generated.jooq.Public;
import com.github.rinotc.springrestsample.infra.generated.jooq.tables.records.DomainModelsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ドメインモデルテーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DomainModels extends TableImpl<DomainModelsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.domain_models</code>
     */
    public static final DomainModels DOMAIN_MODELS = new DomainModels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DomainModelsRecord> getRecordType() {
        return DomainModelsRecord.class;
    }

    /**
     * The column <code>public.domain_models.domain_model_id</code>. ドメインモデルID
     */
    public final TableField<DomainModelsRecord, String> DOMAIN_MODEL_ID = createField(DSL.name("domain_model_id"), SQLDataType.CHAR(36).nullable(false), this, "ドメインモデルID");

    /**
     * The column <code>public.domain_models.bounded_context_id</code>.
     * 紐づく境界づけられたコンテキストID
     */
    public final TableField<DomainModelsRecord, String> BOUNDED_CONTEXT_ID = createField(DSL.name("bounded_context_id"), SQLDataType.CHAR(36).nullable(false), this, "紐づく境界づけられたコンテキストID");

    /**
     * The column <code>public.domain_models.ubiquitous_name</code>. ユビキタス名
     */
    public final TableField<DomainModelsRecord, String> UBIQUITOUS_NAME = createField(DSL.name("ubiquitous_name"), SQLDataType.VARCHAR(50).nullable(false), this, "ユビキタス名");

    /**
     * The column <code>public.domain_models.english_name</code>.
     * ドメインモデル英語名（プロジェクト内で一意）
     */
    public final TableField<DomainModelsRecord, String> ENGLISH_NAME = createField(DSL.name("english_name"), SQLDataType.VARCHAR(100).nullable(false), this, "ドメインモデル英語名（プロジェクト内で一意）");

    /**
     * The column <code>public.domain_models.knowledge</code>. モデルの知識
     */
    public final TableField<DomainModelsRecord, String> KNOWLEDGE = createField(DSL.name("knowledge"), SQLDataType.CLOB.nullable(false), this, "モデルの知識");

    private DomainModels(Name alias, Table<DomainModelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DomainModels(Name alias, Table<DomainModelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ドメインモデルテーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.domain_models</code> table reference
     */
    public DomainModels(String alias) {
        this(DSL.name(alias), DOMAIN_MODELS);
    }

    /**
     * Create an aliased <code>public.domain_models</code> table reference
     */
    public DomainModels(Name alias) {
        this(alias, DOMAIN_MODELS);
    }

    /**
     * Create a <code>public.domain_models</code> table reference
     */
    public DomainModels() {
        this(DSL.name("domain_models"), null);
    }

    public <O extends Record> DomainModels(Table<O> child, ForeignKey<O, DomainModelsRecord> key) {
        super(child, key, DOMAIN_MODELS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DOMAIN_MODEL_PROJECT_ID_ENGLISH_NAME_UINDEX);
    }

    @Override
    public UniqueKey<DomainModelsRecord> getPrimaryKey() {
        return Keys.DOMAIN_MODEL_PK;
    }

    @Override
    public List<ForeignKey<DomainModelsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOMAIN_MODELS__DOMAIN_MODELS_BOUNDED_CONTEXTS_BOUNDED_CONTEXT_ID_FK);
    }

    private transient BoundedContexts _boundedContexts;

    /**
     * Get the implicit join path to the <code>public.bounded_contexts</code>
     * table.
     */
    public BoundedContexts boundedContexts() {
        if (_boundedContexts == null)
            _boundedContexts = new BoundedContexts(this, Keys.DOMAIN_MODELS__DOMAIN_MODELS_BOUNDED_CONTEXTS_BOUNDED_CONTEXT_ID_FK);

        return _boundedContexts;
    }

    @Override
    public DomainModels as(String alias) {
        return new DomainModels(DSL.name(alias), this);
    }

    @Override
    public DomainModels as(Name alias) {
        return new DomainModels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainModels rename(String name) {
        return new DomainModels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DomainModels rename(Name name) {
        return new DomainModels(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
