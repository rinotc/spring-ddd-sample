/*
 * This file is generated by jOOQ.
 */
package com.github.rinotc.springrestsample.infra.generated.jooq.tables;


import com.github.rinotc.springrestsample.infra.generated.jooq.Indexes;
import com.github.rinotc.springrestsample.infra.generated.jooq.Keys;
import com.github.rinotc.springrestsample.infra.generated.jooq.Public;
import com.github.rinotc.springrestsample.infra.generated.jooq.tables.records.BoundedContextsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * プロジェクトテーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoundedContexts extends TableImpl<BoundedContextsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bounded_contexts</code>
     */
    public static final BoundedContexts BOUNDED_CONTEXTS = new BoundedContexts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoundedContextsRecord> getRecordType() {
        return BoundedContextsRecord.class;
    }

    /**
     * The column <code>public.bounded_contexts.bounded_context_id</code>.
     * 境界づけられたコンテキストID
     */
    public final TableField<BoundedContextsRecord, String> BOUNDED_CONTEXT_ID = createField(DSL.name("bounded_context_id"), SQLDataType.CHAR(36).nullable(false), this, "境界づけられたコンテキストID");

    /**
     * The column <code>public.bounded_contexts.bounded_context_alias</code>.
     * 境界づけられたコンテキストのエイリアス
     */
    public final TableField<BoundedContextsRecord, String> BOUNDED_CONTEXT_ALIAS = createField(DSL.name("bounded_context_alias"), SQLDataType.VARCHAR(32).nullable(false), this, "境界づけられたコンテキストのエイリアス");

    /**
     * The column <code>public.bounded_contexts.bounded_context_name</code>.
     * 境界づけられたコンテキストの名称
     */
    public final TableField<BoundedContextsRecord, String> BOUNDED_CONTEXT_NAME = createField(DSL.name("bounded_context_name"), SQLDataType.VARCHAR(100).nullable(false), this, "境界づけられたコンテキストの名称");

    /**
     * The column <code>public.bounded_contexts.bounded_context_overview</code>.
     * 境界づけられたコンテキストの概要
     */
    public final TableField<BoundedContextsRecord, String> BOUNDED_CONTEXT_OVERVIEW = createField(DSL.name("bounded_context_overview"), SQLDataType.VARCHAR(500).nullable(false), this, "境界づけられたコンテキストの概要");

    private BoundedContexts(Name alias, Table<BoundedContextsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BoundedContexts(Name alias, Table<BoundedContextsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("プロジェクトテーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bounded_contexts</code> table reference
     */
    public BoundedContexts(String alias) {
        this(DSL.name(alias), BOUNDED_CONTEXTS);
    }

    /**
     * Create an aliased <code>public.bounded_contexts</code> table reference
     */
    public BoundedContexts(Name alias) {
        this(alias, BOUNDED_CONTEXTS);
    }

    /**
     * Create a <code>public.bounded_contexts</code> table reference
     */
    public BoundedContexts() {
        this(DSL.name("bounded_contexts"), null);
    }

    public <O extends Record> BoundedContexts(Table<O> child, ForeignKey<O, BoundedContextsRecord> key) {
        super(child, key, BOUNDED_CONTEXTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UQ_BOUNDED_CONTEXTS_BOUNDED_CONTEXT_ALIAS);
    }

    @Override
    public UniqueKey<BoundedContextsRecord> getPrimaryKey() {
        return Keys.USER_PK;
    }

    @Override
    public BoundedContexts as(String alias) {
        return new BoundedContexts(DSL.name(alias), this);
    }

    @Override
    public BoundedContexts as(Name alias) {
        return new BoundedContexts(alias, this);
    }

    @Override
    public BoundedContexts as(Table<?> alias) {
        return new BoundedContexts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BoundedContexts rename(String name) {
        return new BoundedContexts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoundedContexts rename(Name name) {
        return new BoundedContexts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoundedContexts rename(Table<?> name) {
        return new BoundedContexts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
