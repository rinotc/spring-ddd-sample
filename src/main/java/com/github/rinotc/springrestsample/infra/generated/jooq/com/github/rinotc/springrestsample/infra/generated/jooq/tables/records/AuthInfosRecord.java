/*
 * This file is generated by jOOQ.
 */
package com.github.rinotc.springrestsample.infra.generated.jooq.tables.records;


import com.github.rinotc.springrestsample.infra.generated.jooq.tables.AuthInfos;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 認証情報
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthInfosRecord extends UpdatableRecordImpl<AuthInfosRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.auth_infos.auth_info_id</code>. 認証情報ID
     */
    public void setAuthInfoId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.auth_infos.auth_info_id</code>. 認証情報ID
     */
    public String getAuthInfoId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.auth_infos.user_id</code>. ユーザーID
     */
    public void setUserId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.auth_infos.user_id</code>. ユーザーID
     */
    public String getUserId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.auth_infos.hashed_password</code>. ハッシュ済みパスワード
     */
    public void setHashedPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.auth_infos.hashed_password</code>. ハッシュ済みパスワード
     */
    public String getHashedPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.auth_infos.salt</code>. ソルト
     */
    public void setSalt(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.auth_infos.salt</code>. ソルト
     */
    public String getSalt() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return AuthInfos.AUTH_INFOS.AUTH_INFO_ID;
    }

    @Override
    public Field<String> field2() {
        return AuthInfos.AUTH_INFOS.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return AuthInfos.AUTH_INFOS.HASHED_PASSWORD;
    }

    @Override
    public Field<String> field4() {
        return AuthInfos.AUTH_INFOS.SALT;
    }

    @Override
    public String component1() {
        return getAuthInfoId();
    }

    @Override
    public String component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getHashedPassword();
    }

    @Override
    public String component4() {
        return getSalt();
    }

    @Override
    public String value1() {
        return getAuthInfoId();
    }

    @Override
    public String value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getHashedPassword();
    }

    @Override
    public String value4() {
        return getSalt();
    }

    @Override
    public AuthInfosRecord value1(String value) {
        setAuthInfoId(value);
        return this;
    }

    @Override
    public AuthInfosRecord value2(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public AuthInfosRecord value3(String value) {
        setHashedPassword(value);
        return this;
    }

    @Override
    public AuthInfosRecord value4(String value) {
        setSalt(value);
        return this;
    }

    @Override
    public AuthInfosRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthInfosRecord
     */
    public AuthInfosRecord() {
        super(AuthInfos.AUTH_INFOS);
    }

    /**
     * Create a detached, initialised AuthInfosRecord
     */
    public AuthInfosRecord(String authInfoId, String userId, String hashedPassword, String salt) {
        super(AuthInfos.AUTH_INFOS);

        setAuthInfoId(authInfoId);
        setUserId(userId);
        setHashedPassword(hashedPassword);
        setSalt(salt);
    }
}
