/*
 * This file is generated by jOOQ.
 */
package com.github.rinotc.springrestsample.infra.generated.jooq.tables;


import com.github.rinotc.springrestsample.infra.generated.jooq.Keys;
import com.github.rinotc.springrestsample.infra.generated.jooq.Public;
import com.github.rinotc.springrestsample.infra.generated.jooq.tables.records.AuthInfosRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 認証情報
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthInfos extends TableImpl<AuthInfosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.auth_infos</code>
     */
    public static final AuthInfos AUTH_INFOS = new AuthInfos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthInfosRecord> getRecordType() {
        return AuthInfosRecord.class;
    }

    /**
     * The column <code>public.auth_infos.auth_info_id</code>. 認証情報ID
     */
    public final TableField<AuthInfosRecord, String> AUTH_INFO_ID = createField(DSL.name("auth_info_id"), SQLDataType.CHAR(36).nullable(false), this, "認証情報ID");

    /**
     * The column <code>public.auth_infos.user_id</code>. ユーザーID
     */
    public final TableField<AuthInfosRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CHAR(36).nullable(false), this, "ユーザーID");

    /**
     * The column <code>public.auth_infos.hashed_password</code>. ハッシュ済みパスワード
     */
    public final TableField<AuthInfosRecord, String> HASHED_PASSWORD = createField(DSL.name("hashed_password"), SQLDataType.VARCHAR(255).nullable(false), this, "ハッシュ済みパスワード");

    /**
     * The column <code>public.auth_infos.salt</code>. ソルト
     */
    public final TableField<AuthInfosRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR(255).nullable(false), this, "ソルト");

    private AuthInfos(Name alias, Table<AuthInfosRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthInfos(Name alias, Table<AuthInfosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("認証情報"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.auth_infos</code> table reference
     */
    public AuthInfos(String alias) {
        this(DSL.name(alias), AUTH_INFOS);
    }

    /**
     * Create an aliased <code>public.auth_infos</code> table reference
     */
    public AuthInfos(Name alias) {
        this(alias, AUTH_INFOS);
    }

    /**
     * Create a <code>public.auth_infos</code> table reference
     */
    public AuthInfos() {
        this(DSL.name("auth_infos"), null);
    }

    public <O extends Record> AuthInfos(Table<O> child, ForeignKey<O, AuthInfosRecord> key) {
        super(child, key, AUTH_INFOS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AuthInfosRecord> getPrimaryKey() {
        return Keys.AUTH_INFO_PK;
    }

    @Override
    public AuthInfos as(String alias) {
        return new AuthInfos(DSL.name(alias), this);
    }

    @Override
    public AuthInfos as(Name alias) {
        return new AuthInfos(alias, this);
    }

    @Override
    public AuthInfos as(Table<?> alias) {
        return new AuthInfos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthInfos rename(String name) {
        return new AuthInfos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthInfos rename(Name name) {
        return new AuthInfos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthInfos rename(Table<?> name) {
        return new AuthInfos(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
